problem 622 leetcode:

class MyCircularQueue:

    def __init__(self, k: int):
        self.capacity = k
        self.front = 0
        self.rear = -1
        self.size = 0
        self.queue = [-1] * k
        

    def enQueue(self, value: int) -> bool:
        if self.isFull():
            return False
        self.rear = (self.rear + 1) % self.capacity
        self.queue[self.rear] = value
        self.size += 1
        return True
        

    def deQueue(self) -> bool:
        if self.isEmpty():
            return False
        self.front = (self.front + 1) % self.capacity
        self.size -= 1
        return True

        

    def Front(self) -> int:
        return self.queue[self.front] if not self.isEmpty() else -1

        

    def Rear(self) -> int:
        return self.queue[self.rear] if not self.isEmpty() else -1


    def isEmpty(self) -> bool:
        return self.size == 0
        

    def isFull(self) -> bool:
        return self.size == self.capacity
        
  problem 232 leetcode:
  class MyQueue:
    



    def __init__(self):
        self.arr=[0]*200
        self.front=0
        self.rear=0
        self.size=200
        

    def push(self, x: int) -> None:
        if self.rear==self.size:
            return True
        self.arr[self.rear]=x
        self.rear+=1

    def pop(self) -> int:
        if self.front==self.rear:
            return True
        x=self.arr[self.front]
        self.front+=1
        return x

    def peek(self) -> int:
        return self.arr[self.front]
    def empty(self) -> bool:

        if (self.front==self.rear):
            return True
        return False
        

